package org.example

import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.asFlow
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.onEach

class FlowOperators {

    //in this example, we see the multiple operator
    /*
    * 1.Intermediate Operators =>map, filter, take, onEach, transform, reduce, fold
    * 2.Terminal Operators => collect, toList, first, last, single, debounce
    * Intermediate Operators
        ðŸ”¹ Transforming
            map â€“ Transforms each value.
            mapLatest â€“ Cancels previous transform if a new value comes in.
            flatMapConcat â€“ Flattens flows sequentially.
            flatMapMerge â€“ Flattens flows concurrently.
            flatMapLatest â€“ Cancels previous flow and switches to the latest.
        ðŸ”¹ Filtering
            filter â€“ Emits only values that match the condition.
            filterNot â€“ Emits values that do not match the condition.
            distinctUntilChanged â€“ Emits only if value is different from the previous.
            take(n) â€“ Emits only the first n values.
            drop(n) â€“ Skips the first n values.
            debounce(time) â€“ Emits the last value after a timeout of no new values.
            sample(time) â€“ Emits the latest value at regular intervals.
        ðŸ”¹ Combining
            combine â€“ Combines latest values from multiple flows.
            zip â€“ Pairs values from two flows by index.
            merge â€“ Emits values from multiple flows concurrently.
        ðŸ”¹ Control
            onEach â€“ Perform an action (e.g., logging) on each emission.
            transform â€“ Fully custom transformation and emission logic.
       Terminal Operators
            collect â€“ Collects the emitted values (starts the flow).
            first â€“ Returns the first emitted value.
            last â€“ Returns the last emitted value.
            toList() â€“ Collects all values into a list.
            count() â€“ Returns the number of emissions.
            reduce() â€“ Accumulates values to a single result.
            fold() â€“ Like reduce, but with an initial value.
    * */


    fun useOperators(): Flow<Int> {
        return (1..10).asFlow()
            .onEach { println("before collecting we will operate it. : $it") }
            .filter { it % 2 == 0 }
            .map { it * it }

    }


}